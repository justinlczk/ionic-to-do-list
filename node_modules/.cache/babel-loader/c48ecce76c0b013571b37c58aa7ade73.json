{"ast":null,"code":"import { useEffect, useCallback } from \"react\";\n//import { IonInput } from '@ionic/react';\nimport { useStorage, useStorageItem } from '@capacitor-community/react-hooks/storage'; //const { Storage } = Plugins;\n\nconst TODO_STORAGE = \"todos\";\nconst tableauToDo = [];\nexport function useToDoList() {\n  const {\n    get,\n    set,\n    remove,\n    getKeys,\n    clear\n  } = useStorage();\n  useEffect(() => {\n    async function example() {\n      const value = await get('name');\n      await set('name', 'Maxime');\n      await remove('name');\n      const allKeys = await getKeys();\n      await clear();\n    }\n  }, [get, set, remove, getKeys, clear]);\n  const [name, setName] = useStorageItem('name', 'Maximum'); // Example:\n\n  const updateName = useCallback(n => {\n    setName(n);\n  }, [setName]); //Exemple de set\n\n  set('name', 'Justin');\n  console.log(get('name'));\n\n  const createItem = itemValue => {\n    console.log('Le texte envoyé :', itemValue);\n    tableauToDo.push(itemValue);\n    console.log(tableauToDo); //Ne prends que la dernière entrée en compte\n    //tableauToDo.map((value, index) => set('todos', JSON.stringify({ id: index, name: value})))\n    //console.log(get('todos'))\n    //Prends en compte plusieurs entrées mais écrase toujours les données précédentes\n\n    set('todosSet', JSON.stringify(tableauToDo));\n    console.log(get('todosSet'));\n    let oldTable = set('todoKepp', JSON.stringify(tableauToDo));\n  };\n\n  return {\n    createItem,\n    tableauToDo\n  };\n}","map":{"version":3,"sources":["/Users/justinluczak/Documents/COURS CNAM 2EME ANNEE/webmobile/Exercice todolist/todolist/src/hooks/useToDoList.ts"],"names":["useEffect","useCallback","useStorage","useStorageItem","TODO_STORAGE","tableauToDo","useToDoList","get","set","remove","getKeys","clear","example","value","allKeys","name","setName","updateName","n","console","log","createItem","itemValue","push","JSON","stringify","oldTable"],"mappings":"AAAA,SAAmBA,SAAnB,EAA8BC,WAA9B,QAAiD,OAAjD;AAGA;AACA,SAASC,UAAT,EAAqBC,cAArB,QAA8D,0CAA9D,C,CAEA;;AAIA,MAAMC,YAAY,GAAG,OAArB;AACA,MAAMC,WAAqB,GAAG,EAA9B;AAGA,OAAO,SAASC,WAAT,GAAuB;AAE1B,QAAM;AAAEC,IAAAA,GAAF;AAAOC,IAAAA,GAAP;AAAYC,IAAAA,MAAZ;AAAoBC,IAAAA,OAApB;AAA6BC,IAAAA;AAA7B,MAAuCT,UAAU,EAAvD;AACAF,EAAAA,SAAS,CAAC,MAAM;AACZ,mBAAeY,OAAf,GAAyB;AACrB,YAAMC,KAAK,GAAG,MAAMN,GAAG,CAAC,MAAD,CAAvB;AACA,YAAMC,GAAG,CAAC,MAAD,EAAS,QAAT,CAAT;AACA,YAAMC,MAAM,CAAC,MAAD,CAAZ;AACA,YAAMK,OAAO,GAAG,MAAMJ,OAAO,EAA7B;AACA,YAAMC,KAAK,EAAX;AACH;AACJ,GARQ,EAQN,CAACJ,GAAD,EAAMC,GAAN,EAAWC,MAAX,EAAmBC,OAAnB,EAA4BC,KAA5B,CARM,CAAT;AAUA,QAAM,CAACI,IAAD,EAAOC,OAAP,IAAkBb,cAAc,CAAC,MAAD,EAAS,SAAT,CAAtC,CAb0B,CAe1B;;AACA,QAAMc,UAAU,GAAGhB,WAAW,CAAEiB,CAAD,IAAO;AAClCF,IAAAA,OAAO,CAACE,CAAD,CAAP;AACH,GAF6B,EAE3B,CAACF,OAAD,CAF2B,CAA9B,CAhB0B,CAqB1B;;AACAR,EAAAA,GAAG,CAAC,MAAD,EAAS,QAAT,CAAH;AACAW,EAAAA,OAAO,CAACC,GAAR,CAAYb,GAAG,CAAC,MAAD,CAAf;;AAEA,QAAMc,UAAU,GAAIC,SAAD,IAAuB;AACtCH,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCE,SAAjC;AACAjB,IAAAA,WAAW,CAACkB,IAAZ,CAAiBD,SAAjB;AACAH,IAAAA,OAAO,CAACC,GAAR,CAAYf,WAAZ,EAHsC,CAKtC;AACA;AACA;AAIA;;AACCG,IAAAA,GAAG,CAAC,UAAD,EAAagB,IAAI,CAACC,SAAL,CAAepB,WAAf,CAAb,CAAH;AAEAc,IAAAA,OAAO,CAACC,GAAR,CAAYb,GAAG,CAAC,UAAD,CAAf;AAEA,QAAImB,QAAQ,GAEZlB,GAAG,CAAC,UAAD,EAAcgB,IAAI,CAACC,SAAL,CAAepB,WAAf,CAAd,CAFH;AAIJ,GApBD;;AA2BA,SAAO;AACHgB,IAAAA,UADG;AACShB,IAAAA;AADT,GAAP;AAIH","sourcesContent":["import { useState, useEffect, useCallback } from \"react\";\nimport { isPlatform } from '@ionic/react';\nimport { Plugins } from '@capacitor/core';\n//import { IonInput } from '@ionic/react';\nimport { useStorage, useStorageItem, availableFeatures } from '@capacitor-community/react-hooks/storage';\n\n//const { Storage } = Plugins;\n\n\n\nconst TODO_STORAGE = \"todos\";\nconst tableauToDo: string[] = [];\n\n\nexport function useToDoList() {\n\n    const { get, set, remove, getKeys, clear } = useStorage();\n    useEffect(() => {\n        async function example() {\n            const value = await get('name');\n            await set('name', 'Maxime');\n            await remove('name');\n            const allKeys = await getKeys();\n            await clear();\n        }\n    }, [get, set, remove, getKeys, clear]);\n\n    const [name, setName] = useStorageItem('name', 'Maximum');\n\n    // Example:\n    const updateName = useCallback((n) => {\n        setName(n);\n    }, [setName]);\n\n\n    //Exemple de set\n    set('name', 'Justin')\n    console.log(get('name'))\n\n    const createItem = (itemValue: string) => {\n        console.log('Le texte envoyé :', itemValue)\n        tableauToDo.push(itemValue)\n        console.log(tableauToDo)\n\n        //Ne prends que la dernière entrée en compte\n        //tableauToDo.map((value, index) => set('todos', JSON.stringify({ id: index, name: value})))\n        //console.log(get('todos'))\n\n\n\n        //Prends en compte plusieurs entrées mais écrase toujours les données précédentes\n         set('todosSet', JSON.stringify(tableauToDo));\n\n         console.log(get('todosSet'))\n\n         let oldTable = \n\n         set('todoKepp', (JSON.stringify(tableauToDo)))\n\n    }\n\n    \n\n\n\n\n    return {\n        createItem, tableauToDo\n    }\n\n}\n\n\nexport interface ToDoList {\n    filepath: string;\n    webviewPath?: string;\n}"]},"metadata":{},"sourceType":"module"}