{"ast":null,"code":"import { useStorage } from '@capacitor-community/react-hooks/storage';\nlet tableLocal = [];\nexport function useToDoList() {\n  const {\n    get,\n    set,\n    remove\n  } = useStorage(); //Pour initialiser la liste stockées en local et la stocker sur la liste temporaire\n\n  const initializeItems2d = () => {\n    get('todos2d').then(valueInitial2d => {\n      if (valueInitial2d != null) {\n        tableLocal = JSON.parse(valueInitial2d);\n      } else {\n        tableLocal = ['vide'];\n      }\n    });\n  }; //Pour ajouter des items et les sauvegarder en local : \n\n\n  const addItem = itemValue => {\n    if (itemValue === undefined) {\n      return;\n    }\n\n    if (tableLocal[0] === 'vide') {\n      tableLocal = [];\n    } // je fais le tableau en 2 dimensions afin de stocker l'état\n\n\n    tableLocal.push([itemValue, false]);\n    remove('todos2d');\n    set('todos2d', JSON.stringify(tableLocal));\n  }; //Pour changer l'état d'une entrée\n\n\n  const changeState = (key, state) => {\n    if (state === false) {\n      console.log(\"ici\", tableLocal[key]);\n      const line = tableLocal[key];\n      line[1] = false;\n    }\n  }; //Pour retirer tous les items stockés dans la liste : \n\n\n  const removeAllItems = () => {\n    remove('todos2d');\n    tableLocal = ['vide'];\n  };\n\n  return {\n    addItem,\n    removeAllItems,\n    tableLocal,\n    initializeItems2d,\n    changeState\n  };\n}","map":{"version":3,"sources":["/Users/justinluczak/Documents/COURS CNAM 2EME ANNEE/webmobile/Exercice todolist/todolist/src/hooks/useToDoList.ts"],"names":["useStorage","tableLocal","useToDoList","get","set","remove","initializeItems2d","then","valueInitial2d","JSON","parse","addItem","itemValue","undefined","push","stringify","changeState","key","state","console","log","line","removeAllItems"],"mappings":"AAAA,SAASA,UAAT,QAA2B,0CAA3B;AAGA,IAAIC,UAAiB,GAAG,EAAxB;AAEA,OAAO,SAASC,WAAT,GAAuB;AAG1B,QAAM;AAAEC,IAAAA,GAAF;AAAOC,IAAAA,GAAP;AAAYC,IAAAA;AAAZ,MAAuBL,UAAU,EAAvC,CAH0B,CAK1B;;AACA,QAAMM,iBAAiB,GAAG,MAAM;AAC5BH,IAAAA,GAAG,CAAC,SAAD,CAAH,CAAeI,IAAf,CAAqBC,cAAD,IAAoB;AACpC,UAAIA,cAAc,IAAI,IAAtB,EAA4B;AACxBP,QAAAA,UAAU,GAAGQ,IAAI,CAACC,KAAL,CAAWF,cAAX,CAAb;AACH,OAFD,MAEO;AACHP,QAAAA,UAAU,GAAG,CAAC,MAAD,CAAb;AACH;AACJ,KAND;AAOH,GARD,CAN0B,CAgB1B;;;AACA,QAAMU,OAAO,GAAIC,SAAD,IAAuB;AAEnC,QAAIA,SAAS,KAAKC,SAAlB,EAA6B;AACzB;AACH;;AAED,QAAIZ,UAAU,CAAC,CAAD,CAAV,KAAkB,MAAtB,EAA8B;AAC1BA,MAAAA,UAAU,GAAG,EAAb;AACH,KARkC,CAUnC;;;AACAA,IAAAA,UAAU,CAACa,IAAX,CAAgB,CAACF,SAAD,EAAY,KAAZ,CAAhB;AACAP,IAAAA,MAAM,CAAC,SAAD,CAAN;AACAD,IAAAA,GAAG,CAAC,SAAD,EAAYK,IAAI,CAACM,SAAL,CAAed,UAAf,CAAZ,CAAH;AACH,GAdD,CAjB0B,CAiC1B;;;AACA,QAAMe,WAAW,GAAG,CAACC,GAAD,EAAcC,KAAd,KAAiC;AAEjD,QAAIA,KAAK,KAAK,KAAd,EAAqB;AACjBC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBnB,UAAU,CAACgB,GAAD,CAA7B;AACA,YAAMI,IAAI,GAAGpB,UAAU,CAACgB,GAAD,CAAvB;AACAI,MAAAA,IAAI,CAAC,CAAD,CAAJ,GAAU,KAAV;AAEH;AAEJ,GATD,CAlC0B,CA6C1B;;;AACA,QAAMC,cAAc,GAAG,MAAM;AAEzBjB,IAAAA,MAAM,CAAC,SAAD,CAAN;AACAJ,IAAAA,UAAU,GAAG,CAAC,MAAD,CAAb;AACH,GAJD;;AAMA,SAAO;AACHU,IAAAA,OADG;AACMW,IAAAA,cADN;AACsBrB,IAAAA,UADtB;AACkCK,IAAAA,iBADlC;AACqDU,IAAAA;AADrD,GAAP;AAIH","sourcesContent":["import { useStorage } from '@capacitor-community/react-hooks/storage';\nimport { verify } from 'crypto';\n\nlet tableLocal: any[] = [];\n\nexport function useToDoList() {\n\n\n    const { get, set, remove } = useStorage();\n\n    //Pour initialiser la liste stockées en local et la stocker sur la liste temporaire\n    const initializeItems2d = () => {\n        get('todos2d').then((valueInitial2d) => {\n            if (valueInitial2d != null) {\n                tableLocal = JSON.parse(valueInitial2d)\n            } else {\n                tableLocal = ['vide']\n            }\n        })\n    }\n\n    //Pour ajouter des items et les sauvegarder en local : \n    const addItem = (itemValue: string) => {\n\n        if (itemValue === undefined) {\n            return\n        }\n\n        if (tableLocal[0] === 'vide') {\n            tableLocal = []\n        }\n\n        // je fais le tableau en 2 dimensions afin de stocker l'état\n        tableLocal.push([itemValue, false])\n        remove('todos2d')\n        set('todos2d', JSON.stringify(tableLocal))\n    }\n\n    //Pour changer l'état d'une entrée\n    const changeState = (key: number, state: boolean) => {\n        \n        if (state === false) {\n            console.log(\"ici\", tableLocal[key])\n            const line = tableLocal[key]\n            line[1] = false\n            \n        }\n\n    }\n\n    //Pour retirer tous les items stockés dans la liste : \n    const removeAllItems = () => {\n\n        remove('todos2d')\n        tableLocal = ['vide']\n    }\n\n    return {\n        addItem, removeAllItems, tableLocal, initializeItems2d, changeState\n    }\n\n}"]},"metadata":{},"sourceType":"module"}