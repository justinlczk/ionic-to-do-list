{"ast":null,"code":"import { useStorage } from '@capacitor-community/react-hooks/storage';\nimport { useEffect, useState } from 'react';\nexport function useToDoList() {\n  const {\n    get,\n    set,\n    remove\n  } = useStorage();\n  let listStocked = [];\n  let [listItems, updateList] = useState(listStocked); // compteur tâches à faire\n\n  let [counterTodo, setCounterTodo] = useState(0);\n\n  function getCounterTodo() {\n    get('counterTodo').then(number => {\n      if (number != null) {\n        setCounterTodo(parseInt(number));\n      }\n    });\n  }\n\n  function addCounterTodo() {\n    setCounterTodo(counterTodo + 1);\n  }\n\n  function removeCounterTodo() {\n    setCounterTodo(counterTodo - 1);\n  } //Pour initialiser la liste stockées en local\n\n\n  function getStockedList() {\n    get('listTodo').then(listJson => {\n      if (listJson != null) {\n        listStocked = JSON.parse(listJson);\n        updateList(listStocked);\n      }\n    });\n  } // appeler la fonction une seule fois pour initialiser les items stockés en local\n\n\n  useEffect(() => {\n    getStockedList();\n  }, []); // fonction pour ajouter des items à la liste\n\n  function addItem(text) {\n    // on prépare l'id pour le nouvel objet en prenant le dernier id du tableau actuel et on retire 1 pour débuter à la bonne valeur \n    let lengthList = listItems.length - 1;\n    const newItem = {\n      id: lengthList++,\n      text: text,\n      checked: false\n    };\n    const newTable = listItems.concat([newItem]);\n    addCounterTodo(); // on ajoute le nouveau tableau au sotckage en local\n\n    set('listTodo', JSON.stringify(newTable)); // on update la liste en mémoire\n\n    updateList(newTable);\n  }\n\n  function toggleItem(id) {\n    const updatedList = listItems.map(item => {\n      if (item.id === id) {\n        if (item) item.checked = !item.checked;\n      }\n\n      return item;\n    }); // on ajoute les nouvelles valeurs dans le tableau stocké en local\n\n    set('listTodo', JSON.stringify(updatedList)); // on update les nouvelles valeurs en mémoire\n\n    updateList(updatedList);\n  } // fonction pour retirer tous les items de la liste\n\n\n  function removeAllItems() {\n    // on enlève la liste stockée en local\n    remove('listTodo'); // on vide la liste stockée en mémoire\n\n    updateList([]);\n    remove('counterTodo');\n    setCounterTodo(0);\n  }\n\n  return {\n    listItems,\n    addItem,\n    toggleItem,\n    removeAllItems,\n    counterTodo,\n    setCounterTodo\n  };\n}","map":{"version":3,"sources":["/Users/justinluczak/Documents/COURS CNAM 2EME ANNEE/webmobile/github/luczak-justin_todo-list/src/hooks/useToDoList.ts"],"names":["useStorage","useEffect","useState","useToDoList","get","set","remove","listStocked","listItems","updateList","counterTodo","setCounterTodo","getCounterTodo","then","number","parseInt","addCounterTodo","removeCounterTodo","getStockedList","listJson","JSON","parse","addItem","text","lengthList","length","newItem","id","checked","newTable","concat","stringify","toggleItem","updatedList","map","item","removeAllItems"],"mappings":"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","sourcesContent":["import { useStorage } from '@capacitor-community/react-hooks/storage';\nimport { useEffect, useState } from 'react';\n\n\n\nexport function useToDoList() {\n\n    const { get, set, remove } = useStorage();\n\n    let listStocked = [];\n\n    let [listItems, updateList] = useState(listStocked);\n\n    // compteur tâches à faire\n    let [counterTodo, setCounterTodo] = useState(0);\n\n    function getCounterTodo() {\n        get('counterTodo').then((number) => {\n            if (number != null) {\n                setCounterTodo(parseInt(number))\n            }\n        })\n    }\n\n    function addCounterTodo() {\n        setCounterTodo(counterTodo + 1)\n    }\n\n    function removeCounterTodo() {\n        setCounterTodo(counterTodo - 1)\n    }\n\n    //Pour initialiser la liste stockées en local\n    function getStockedList() {\n        get('listTodo').then((listJson) => {\n            if (listJson != null) {\n                listStocked = JSON.parse(listJson);\n\n                updateList(listStocked)\n            }\n        })\n    }\n\n    // appeler la fonction une seule fois pour initialiser les items stockés en local\n    useEffect(() => {\n        getStockedList()\n    }, [])\n\n\n\n    // fonction pour ajouter des items à la liste\n    function addItem(text) {\n\n        // on prépare l'id pour le nouvel objet en prenant le dernier id du tableau actuel et on retire 1 pour débuter à la bonne valeur \n        let lengthList = listItems.length - 1\n\n        const newItem = {\n            id: lengthList++,\n            text: text,\n            checked: false\n        }\n\n        const newTable = listItems.concat([newItem])\n\n        addCounterTodo()\n\n        // on ajoute le nouveau tableau au sotckage en local\n        set('listTodo', JSON.stringify(newTable))\n\n        // on update la liste en mémoire\n        updateList(newTable)\n    }\n\n    function toggleItem(id) {\n        const updatedList = listItems.map(item => {\n            if (item.id === id) {\n\n                if(item)\n\n                item.checked = !item.checked\n                \n            } \n            return item\n        })\n\n        \n\n        // on ajoute les nouvelles valeurs dans le tableau stocké en local\n        set('listTodo', JSON.stringify(updatedList))\n\n        // on update les nouvelles valeurs en mémoire\n        updateList(updatedList)\n    }\n\n    // fonction pour retirer tous les items de la liste\n    function removeAllItems() {\n\n        // on enlève la liste stockée en local\n        remove('listTodo');\n\n        // on vide la liste stockée en mémoire\n        updateList([]);\n\n        remove('counterTodo');\n\n        setCounterTodo(0);\n    }\n\n    \n\n    return {\n        listItems, addItem, toggleItem, removeAllItems, counterTodo, setCounterTodo\n    }\n\n}"]},"metadata":{},"sourceType":"module"}