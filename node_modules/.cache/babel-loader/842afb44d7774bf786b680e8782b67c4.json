{"ast":null,"code":"import { useStorage } from '@capacitor-community/react-hooks/storage';\nlet tableauToDo = [];\nlet tableauNew = [];\nexport function useToDoList() {\n  const {\n    get,\n    set,\n    remove,\n    getKeys,\n    clear\n  } = useStorage(); //Pour initialiser la liste stockées en local et la stocker sur la liste temporaire\n\n  const initializeItems = () => {\n    get('todos').then(valueInitial => {\n      if (valueInitial != null) {\n        tableauToDo = JSON.parse(valueInitial);\n      }\n    });\n  };\n\n  const initializeItems2d = () => {\n    get('todos2d').then(valueInitial2d => {\n      if (valueInitial2d != null) {\n        tableauNew = JSON.parse(valueInitial2d);\n      }\n    });\n  }; //Pour ajouter des items et les sauvegarder en local : \n\n\n  const addItem = itemValue => {\n    tableauToDo.push(itemValue);\n    remove('todos');\n    set('todos', JSON.stringify(tableauToDo)); // je fais le tableau en 2 dimensions afin de stocker l'état\n\n    tableauNew.push([itemValue, 'active']);\n    remove('todos2d');\n    set('todos2d', JSON.stringify(tableauNew));\n  }; //Pour changer l'état d'une entrée\n\n\n  const changeState = key => {\n    const tableContent = tableauNew[key.index];\n\n    if (tableContent[1] == 'active') {\n      tableContent[1] = 'done';\n    } else if (tableContent[1] == 'done') {\n      tableContent[1] = 'active';\n    } //On actualise les données\n\n\n    tableauNew[key.index] = tableContent;\n    remove('todos2d');\n    set('todos2d', JSON.stringify(tableauNew));\n  }; //Pour retirer tous les items stockés dans la liste : \n\n\n  const removeAllItems = () => {\n    remove('todos');\n    tableauToDo = [];\n    remove('todos2d');\n    tableauNew = [];\n  };\n\n  return {\n    addItem,\n    tableauToDo,\n    removeAllItems,\n    initializeItems,\n    tableauNew,\n    initializeItems2d,\n    changeState\n  };\n}","map":{"version":3,"sources":["/Users/justinluczak/Documents/COURS CNAM 2EME ANNEE/webmobile/Exercice todolist/todolist/src/hooks/useToDoList.ts"],"names":["useStorage","tableauToDo","tableauNew","useToDoList","get","set","remove","getKeys","clear","initializeItems","then","valueInitial","JSON","parse","initializeItems2d","valueInitial2d","addItem","itemValue","push","stringify","changeState","key","tableContent","index","removeAllItems"],"mappings":"AAGA,SAASA,UAAT,QAA8D,0CAA9D;AAGA,IAAIC,WAAqB,GAAG,EAA5B;AACA,IAAIC,UAAiB,GAAG,EAAxB;AAEA,OAAO,SAASC,WAAT,GAAuB;AAE1B,QAAM;AAAEC,IAAAA,GAAF;AAAOC,IAAAA,GAAP;AAAYC,IAAAA,MAAZ;AAAoBC,IAAAA,OAApB;AAA6BC,IAAAA;AAA7B,MAAuCR,UAAU,EAAvD,CAF0B,CAI1B;;AACA,QAAMS,eAAe,GAAG,MAAM;AAAEL,IAAAA,GAAG,CAAC,OAAD,CAAH,CAAaM,IAAb,CAAmBC,YAAD,IAAkB;AAChE,UAAIA,YAAY,IAAI,IAApB,EAA0B;AACtBV,QAAAA,WAAW,GAAGW,IAAI,CAACC,KAAL,CAAWF,YAAX,CAAd;AACH;AACJ,KAJ+B;AAI7B,GAJH;;AAMA,QAAMG,iBAAiB,GAAG,MAAM;AAAEV,IAAAA,GAAG,CAAC,SAAD,CAAH,CAAeM,IAAf,CAAqBK,cAAD,IAAoB;AACtE,UAAIA,cAAc,IAAI,IAAtB,EAA4B;AACxBb,QAAAA,UAAU,GAAGU,IAAI,CAACC,KAAL,CAAWE,cAAX,CAAb;AACH;AACJ,KAJiC;AAI/B,GAJH,CAX0B,CAiB1B;;;AACA,QAAMC,OAAO,GAAIC,SAAD,IAAuB;AACnChB,IAAAA,WAAW,CAACiB,IAAZ,CAAiBD,SAAjB;AACAX,IAAAA,MAAM,CAAC,OAAD,CAAN;AACAD,IAAAA,GAAG,CAAC,OAAD,EAAUO,IAAI,CAACO,SAAL,CAAelB,WAAf,CAAV,CAAH,CAHmC,CAKnC;;AACAC,IAAAA,UAAU,CAACgB,IAAX,CAAgB,CAACD,SAAD,EAAY,QAAZ,CAAhB;AACAX,IAAAA,MAAM,CAAC,SAAD,CAAN;AACAD,IAAAA,GAAG,CAAC,SAAD,EAAYO,IAAI,CAACO,SAAL,CAAejB,UAAf,CAAZ,CAAH;AACH,GATD,CAlB0B,CA6B1B;;;AACA,QAAMkB,WAAW,GAAIC,GAAD,IAAc;AAC9B,UAAMC,YAAY,GAAGpB,UAAU,CAACmB,GAAG,CAACE,KAAL,CAA/B;;AACA,QAAID,YAAY,CAAC,CAAD,CAAZ,IAAmB,QAAvB,EAAiC;AAC7BA,MAAAA,YAAY,CAAC,CAAD,CAAZ,GAAkB,MAAlB;AACH,KAFD,MAEO,IAAIA,YAAY,CAAC,CAAD,CAAZ,IAAmB,MAAvB,EAA+B;AAClCA,MAAAA,YAAY,CAAC,CAAD,CAAZ,GAAkB,QAAlB;AACH,KAN6B,CAQ9B;;;AACApB,IAAAA,UAAU,CAACmB,GAAG,CAACE,KAAL,CAAV,GAAwBD,YAAxB;AACAhB,IAAAA,MAAM,CAAC,SAAD,CAAN;AACAD,IAAAA,GAAG,CAAC,SAAD,EAAYO,IAAI,CAACO,SAAL,CAAejB,UAAf,CAAZ,CAAH;AACH,GAZD,CA9B0B,CA4C1B;;;AACA,QAAMsB,cAAc,GAAG,MAAM;AACzBlB,IAAAA,MAAM,CAAC,OAAD,CAAN;AACAL,IAAAA,WAAW,GAAG,EAAd;AAEAK,IAAAA,MAAM,CAAC,SAAD,CAAN;AACAJ,IAAAA,UAAU,GAAG,EAAb;AACH,GAND;;AAYA,SAAO;AACHc,IAAAA,OADG;AACMf,IAAAA,WADN;AACmBuB,IAAAA,cADnB;AACmCf,IAAAA,eADnC;AACoDP,IAAAA,UADpD;AACgEY,IAAAA,iBADhE;AACmFM,IAAAA;AADnF,GAAP;AAIH","sourcesContent":["import { useState, useEffect, useCallback } from \"react\";\nimport { isPlatform } from '@ionic/react';\nimport { Plugins } from '@capacitor/core';\nimport { useStorage, useStorageItem, availableFeatures } from '@capacitor-community/react-hooks/storage';\n\n\nlet tableauToDo: string[] = [];\nlet tableauNew: any[] = [];\n\nexport function useToDoList() {\n\n    const { get, set, remove, getKeys, clear } = useStorage();\n\n    //Pour initialiser la liste stockées en local et la stocker sur la liste temporaire\n    const initializeItems = () => { get('todos').then((valueInitial) => {\n        if (valueInitial != null) {     \n            tableauToDo = JSON.parse(valueInitial)   \n        }\n    })}\n\n    const initializeItems2d = () => { get('todos2d').then((valueInitial2d) => {\n        if (valueInitial2d != null) {        \n            tableauNew = JSON.parse(valueInitial2d)  \n        }\n    })}\n\n    //Pour ajouter des items et les sauvegarder en local : \n    const addItem = (itemValue: string) => {\n        tableauToDo.push(itemValue)\n        remove('todos')\n        set('todos', JSON.stringify(tableauToDo))\n\n        // je fais le tableau en 2 dimensions afin de stocker l'état\n        tableauNew.push([itemValue, 'active'])\n        remove('todos2d')\n        set('todos2d', JSON.stringify(tableauNew))\n    }\n\n    //Pour changer l'état d'une entrée\n    const changeState = (key: any) => {\n        const tableContent = tableauNew[key.index]\n        if (tableContent[1] == 'active') {\n            tableContent[1] = 'done'\n        } else if (tableContent[1] == 'done') {\n            tableContent[1] = 'active'\n        }\n\n        //On actualise les données\n        tableauNew[key.index] = tableContent\n        remove('todos2d')\n        set('todos2d', JSON.stringify(tableauNew))\n    } \n\n    //Pour retirer tous les items stockés dans la liste : \n    const removeAllItems = () => {\n        remove('todos')\n        tableauToDo = []\n\n        remove('todos2d')\n        tableauNew = []\n    }\n\n\n\n    \n\n    return {\n        addItem, tableauToDo, removeAllItems, initializeItems, tableauNew, initializeItems2d, changeState\n    }\n\n}"]},"metadata":{},"sourceType":"module"}