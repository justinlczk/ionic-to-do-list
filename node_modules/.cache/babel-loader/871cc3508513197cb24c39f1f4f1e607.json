{"ast":null,"code":"import { useState, useEffect } from \"react\";\nimport { isPlatform } from '@ionic/react';\nimport { Plugins } from '@capacitor/core'; //import { IonInput } from '@ionic/react';\n\nconst {\n  Storage\n} = Plugins;\nconst TODO_STORAGE = \"todos\";\nconst tableauToDo = [];\nexport function useToDoList() {\n  const createItem = itemValue => {\n    console.log('Le texte envoyé :', itemValue);\n    tableauToDo.push(itemValue);\n    console.log(tableauToDo); //Ne prends que la dernière entrée en compte\n\n    tableauToDo.map((value, index) => Storage.set({\n      key: 'todos',\n      value: JSON.stringify({\n        id: index,\n        name: value\n      })\n    }));\n    const ret = Storage.get({\n      key: 'todos'\n    });\n    console.log(Storage.get({\n      key: 'todos'\n    })); //Prends en compte plusieurs entrées mais écrase toujours les données précédentes\n\n    Storage.set({\n      key: 'todosSet',\n      value: JSON.stringify(tableauToDo)\n    });\n    console.log('todo SetObject', Storage.get({\n      key: 'todosSet'\n    }));\n    const valueToGet = Storage.get({\n      key: 'todosSet'\n    });\n  };\n\n  const [todos, setTodos] = useState([]);\n  useEffect(() => {\n    const loadSaved = async () => {\n      const ToDoString = await Storage.get({\n        key: 'todosSet'\n      });\n      const photosInStorage = ToDoString ? JSON.parse('ToDoString.value') : []; // If running on the web...\n\n      if (!isPlatform('hybrid')) {\n        for (let photo of photosInStorage) {\n          const file = await readFile({\n            path: photo.filepath,\n            directory: FilesystemDirectory.Data\n          }); // Web platform only: Load photo as base64 data\n\n          photo.webviewPath = `data:image/jpeg;base64,${file.data}`;\n        }\n      }\n\n      setTodos(photosInStorage);\n    };\n\n    loadSaved();\n  }, [get, readFile]);\n  return {\n    createItem,\n    tableauToDo\n  };\n}","map":{"version":3,"sources":["/Users/justinluczak/Documents/COURS CNAM 2EME ANNEE/webmobile/Exercice todolist/todolist/src/hooks/useToDoList.ts"],"names":["useState","useEffect","isPlatform","Plugins","Storage","TODO_STORAGE","tableauToDo","useToDoList","createItem","itemValue","console","log","push","map","value","index","set","key","JSON","stringify","id","name","ret","get","valueToGet","todos","setTodos","loadSaved","ToDoString","photosInStorage","parse","photo","file","readFile","path","filepath","directory","FilesystemDirectory","Data","webviewPath","data"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,SAASC,OAAT,QAAwB,iBAAxB,C,CACA;;AAEA,MAAM;AAAEC,EAAAA;AAAF,IAAcD,OAApB;AAGA,MAAME,YAAY,GAAG,OAArB;AACA,MAAMC,WAAqB,GAAG,EAA9B;AAEA,OAAO,SAASC,WAAT,GAAuB;AAE1B,QAAMC,UAAU,GAAIC,SAAD,IAAuB;AACtCC,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCF,SAAjC;AACAH,IAAAA,WAAW,CAACM,IAAZ,CAAiBH,SAAjB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYL,WAAZ,EAHsC,CAKtC;;AACAA,IAAAA,WAAW,CAACO,GAAZ,CAAgB,CAACC,KAAD,EAAQC,KAAR,KAAkBX,OAAO,CAACY,GAAR,CAAY;AAC1CC,MAAAA,GAAG,EAAE,OADqC;AAE1CH,MAAAA,KAAK,EAAEI,IAAI,CAACC,SAAL,CAAe;AAClBC,QAAAA,EAAE,EAAEL,KADc;AAElBM,QAAAA,IAAI,EAAEP;AAFY,OAAf;AAFmC,KAAZ,CAAlC;AAQA,UAAMQ,GAAG,GAAGlB,OAAO,CAACmB,GAAR,CAAY;AAAEN,MAAAA,GAAG,EAAE;AAAP,KAAZ,CAAZ;AAEAP,IAAAA,OAAO,CAACC,GAAR,CAAYP,OAAO,CAACmB,GAAR,CAAY;AAAEN,MAAAA,GAAG,EAAE;AAAP,KAAZ,CAAZ,EAhBsC,CAmBtC;;AACAb,IAAAA,OAAO,CAACY,GAAR,CAAY;AACRC,MAAAA,GAAG,EAAE,UADG;AAERH,MAAAA,KAAK,EAAEI,IAAI,CAACC,SAAL,CAAeb,WAAf;AAFC,KAAZ;AAKAI,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BP,OAAO,CAACmB,GAAR,CAAY;AAAEN,MAAAA,GAAG,EAAE;AAAP,KAAZ,CAA9B;AAGA,UAAMO,UAAU,GAAGpB,OAAO,CAACmB,GAAR,CAAY;AAAEN,MAAAA,GAAG,EAAE;AAAP,KAAZ,CAAnB;AAEH,GA9BD;;AAgCA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoB1B,QAAQ,CAAW,EAAX,CAAlC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAM0B,SAAS,GAAG,YAAY;AAC1B,YAAMC,UAAU,GAAG,MAAMxB,OAAO,CAACmB,GAAR,CAAY;AAAEN,QAAAA,GAAG,EAAE;AAAP,OAAZ,CAAzB;AACA,YAAMY,eAAe,GAAID,UAAU,GAAGV,IAAI,CAACY,KAAL,CAAW,kBAAX,CAAH,GAAoC,EAAvE,CAF0B,CAG1B;;AACA,UAAI,CAAC5B,UAAU,CAAC,QAAD,CAAf,EAA2B;AACvB,aAAK,IAAI6B,KAAT,IAAkBF,eAAlB,EAAmC;AAC/B,gBAAMG,IAAI,GAAG,MAAMC,QAAQ,CAAC;AACxBC,YAAAA,IAAI,EAAEH,KAAK,CAACI,QADY;AAExBC,YAAAA,SAAS,EAAEC,mBAAmB,CAACC;AAFP,WAAD,CAA3B,CAD+B,CAK/B;;AACAP,UAAAA,KAAK,CAACQ,WAAN,GAAqB,0BAAyBP,IAAI,CAACQ,IAAK,EAAxD;AACH;AACJ;;AACDd,MAAAA,QAAQ,CAACG,eAAD,CAAR;AACH,KAfD;;AAgBAF,IAAAA,SAAS;AACZ,GAlBQ,EAkBN,CAACJ,GAAD,EAAMU,QAAN,CAlBM,CAAT;AAsBA,SAAO;AACHzB,IAAAA,UADG;AACSF,IAAAA;AADT,GAAP;AAIH","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { isPlatform } from '@ionic/react';\nimport { Plugins } from '@capacitor/core';\n//import { IonInput } from '@ionic/react';\n\nconst { Storage } = Plugins;\n\n\nconst TODO_STORAGE = \"todos\";\nconst tableauToDo: string[] = [];\n\nexport function useToDoList() {\n\n    const createItem = (itemValue: string) => {\n        console.log('Le texte envoyé :', itemValue)\n        tableauToDo.push(itemValue)\n        console.log(tableauToDo)\n\n        //Ne prends que la dernière entrée en compte\n        tableauToDo.map((value, index) => Storage.set({\n            key: 'todos',\n            value: JSON.stringify({\n                id: index,\n                name: value\n            })\n        }))\n\n        const ret = Storage.get({ key: 'todos' })\n\n        console.log(Storage.get({ key: 'todos' }))\n\n\n        //Prends en compte plusieurs entrées mais écrase toujours les données précédentes\n        Storage.set({\n            key: 'todosSet',\n            value: JSON.stringify(tableauToDo)\n        });\n\n        console.log('todo SetObject', Storage.get({ key: 'todosSet' }))\n\n\n        const valueToGet = Storage.get({ key: 'todosSet' })\n\n    }\n\n    const [todos, setTodos] = useState<String[]>([]);\n\n    useEffect(() => {\n        const loadSaved = async () => {\n            const ToDoString = await Storage.get({ key: 'todosSet' });\n            const photosInStorage = (ToDoString ? JSON.parse('ToDoString.value') : []) as Todo[];\n            // If running on the web...\n            if (!isPlatform('hybrid')) {\n                for (let photo of photosInStorage) {\n                    const file = await readFile({\n                        path: photo.filepath,\n                        directory: FilesystemDirectory.Data\n                    });\n                    // Web platform only: Load photo as base64 data\n                    photo.webviewPath = `data:image/jpeg;base64,${file.data}`;\n                }\n            }\n            setTodos(photosInStorage);\n        };\n        loadSaved();\n    }, [get, readFile]);\n\n\n\n    return {\n        createItem, tableauToDo\n    }\n\n}\n\n\nexport interface ToDoList {\n    filepath: string;\n    webviewPath?: string;\n}"]},"metadata":{},"sourceType":"module"}