{"ast":null,"code":"import { useStorage } from '@capacitor-community/react-hooks/storage';\nimport { useEffect, useState } from 'react';\nexport function useToDoList() {\n  const {\n    get,\n    set,\n    remove\n  } = useStorage();\n  let listStocked = [];\n  let [listItems, updateList] = useState(listStocked); //Pour initialiser la liste stockées en local\n\n  function getStockedList() {\n    get('listTodo').then(listJson => {\n      if (listJson != null) {\n        listStocked = JSON.parse(listJson);\n        updateList(listStocked);\n      }\n    });\n  } // appeler la fonction une seule fois pour initialiser les items stockés en local\n\n\n  useEffect(() => {\n    getStockedList();\n  }, []); // fonction pour ajouter des items à la liste\n\n  function addItem(text) {\n    // on prépare l'id pour le nouvel objet en prenant le dernier id du tableau actuel et on retire 1 pour débuter à la bonne valeur \n    let lengthList = listItems.length - 1;\n    const newItem = {\n      id: lengthList++,\n      text: text,\n      checked: false\n    };\n    const newTable = listItems.concat([newItem]); // on ajoute le nouveau tableau au sotckage en local\n\n    set('listTodo', JSON.stringify(newTable)); // on update la liste en mémoire\n\n    updateList(newTable);\n  }\n\n  function toggleItem(id) {\n    const updatedList = listItems.map(item => {\n      if (item.id === id) {\n        item.checked = !item.checked;\n      }\n\n      return item;\n    }); // on ajoute les nouvelles valeurs dans le tableau stocké en local\n\n    set('listTodo', JSON.stringify(updatedList)); // on update les nouvelles valeurs en mémoire\n\n    updateList(updatedList);\n  } // fonction pour retirer tous les items de la liste\n\n\n  function removeAllItems() {\n    // on enlève la liste stockée en local\n    remove('listTodo'); // on vide la liste stockée en mémoire\n\n    updateList([]);\n  } // compteur tâches à faire\n\n\n  let [counterTodo, setCounterTodo] = useState(0);\n\n  function getCheckedCounter() {\n    for (const item of listItems) {\n      if (item.checked === false) {\n        setCounterTodo(counterTodo++);\n        return counterTodo;\n      }\n    }\n  }\n\n  useEffect(() => {\n    getCheckedCounter();\n  }, []);\n  return {\n    listItems,\n    addItem,\n    toggleItem,\n    removeAllItems\n  };\n}","map":{"version":3,"sources":["/Users/justinluczak/Documents/COURS CNAM 2EME ANNEE/webmobile/github/luczak-justin_todo-list/src/hooks/useToDoList.ts"],"names":["useStorage","useEffect","useState","useToDoList","get","set","remove","listStocked","listItems","updateList","getStockedList","then","listJson","JSON","parse","addItem","text","lengthList","length","newItem","id","checked","newTable","concat","stringify","toggleItem","updatedList","map","item","removeAllItems","counterTodo","setCounterTodo","getCheckedCounter"],"mappings":"AAAA,SAASA,UAAT,QAA2B,0CAA3B;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAIA,OAAO,SAASC,WAAT,GAAuB;AAE1B,QAAM;AAAEC,IAAAA,GAAF;AAAOC,IAAAA,GAAP;AAAYC,IAAAA;AAAZ,MAAuBN,UAAU,EAAvC;AAEA,MAAIO,WAAW,GAAG,EAAlB;AAEA,MAAI,CAACC,SAAD,EAAYC,UAAZ,IAA0BP,QAAQ,CAACK,WAAD,CAAtC,CAN0B,CAQ1B;;AACA,WAASG,cAAT,GAA0B;AACtBN,IAAAA,GAAG,CAAC,UAAD,CAAH,CAAgBO,IAAhB,CAAsBC,QAAD,IAAc;AAC/B,UAAIA,QAAQ,IAAI,IAAhB,EAAsB;AAClBL,QAAAA,WAAW,GAAGM,IAAI,CAACC,KAAL,CAAWF,QAAX,CAAd;AAEAH,QAAAA,UAAU,CAACF,WAAD,CAAV;AACH;AACJ,KAND;AAOH,GAjByB,CAmB1B;;;AACAN,EAAAA,SAAS,CAAC,MAAM;AACZS,IAAAA,cAAc;AACjB,GAFQ,EAEN,EAFM,CAAT,CApB0B,CA0B1B;;AACA,WAASK,OAAT,CAAiBC,IAAjB,EAAuB;AAEnB;AACA,QAAIC,UAAU,GAAGT,SAAS,CAACU,MAAV,GAAmB,CAApC;AAEA,UAAMC,OAAO,GAAG;AACZC,MAAAA,EAAE,EAAEH,UAAU,EADF;AAEZD,MAAAA,IAAI,EAAEA,IAFM;AAGZK,MAAAA,OAAO,EAAE;AAHG,KAAhB;AAMA,UAAMC,QAAQ,GAAGd,SAAS,CAACe,MAAV,CAAiB,CAACJ,OAAD,CAAjB,CAAjB,CAXmB,CAanB;;AACAd,IAAAA,GAAG,CAAC,UAAD,EAAaQ,IAAI,CAACW,SAAL,CAAeF,QAAf,CAAb,CAAH,CAdmB,CAgBnB;;AACAb,IAAAA,UAAU,CAACa,QAAD,CAAV;AACH;;AAED,WAASG,UAAT,CAAoBL,EAApB,EAAwB;AACpB,UAAMM,WAAW,GAAGlB,SAAS,CAACmB,GAAV,CAAcC,IAAI,IAAI;AACtC,UAAIA,IAAI,CAACR,EAAL,KAAYA,EAAhB,EAAoB;AAChBQ,QAAAA,IAAI,CAACP,OAAL,GAAe,CAACO,IAAI,CAACP,OAArB;AACH;;AACD,aAAOO,IAAP;AACH,KALmB,CAApB,CADoB,CAQpB;;AACAvB,IAAAA,GAAG,CAAC,UAAD,EAAaQ,IAAI,CAACW,SAAL,CAAeE,WAAf,CAAb,CAAH,CAToB,CAWpB;;AACAjB,IAAAA,UAAU,CAACiB,WAAD,CAAV;AACH,GA5DyB,CA8D1B;;;AACA,WAASG,cAAT,GAA0B;AAEtB;AACAvB,IAAAA,MAAM,CAAC,UAAD,CAAN,CAHsB,CAKtB;;AACAG,IAAAA,UAAU,CAAC,EAAD,CAAV;AACH,GAtEyB,CAwE1B;;;AACA,MAAI,CAACqB,WAAD,EAAcC,cAAd,IAAgC7B,QAAQ,CAAC,CAAD,CAA5C;;AAEA,WAAS8B,iBAAT,GAA6B;AACzB,SAAK,MAAMJ,IAAX,IAAmBpB,SAAnB,EAA8B;AAC1B,UAAIoB,IAAI,CAACP,OAAL,KAAiB,KAArB,EAA4B;AACxBU,QAAAA,cAAc,CAACD,WAAW,EAAZ,CAAd;AACA,eAAOA,WAAP;AACH;AACJ;AACJ;;AAED7B,EAAAA,SAAS,CAAC,MAAM;AACZ+B,IAAAA,iBAAiB;AACpB,GAFQ,EAEN,EAFM,CAAT;AAMA,SAAO;AACHxB,IAAAA,SADG;AACQO,IAAAA,OADR;AACiBU,IAAAA,UADjB;AAC6BI,IAAAA;AAD7B,GAAP;AAIH","sourcesContent":["import { useStorage } from '@capacitor-community/react-hooks/storage';\nimport { useEffect, useState } from 'react';\n\n\n\nexport function useToDoList() {\n\n    const { get, set, remove } = useStorage();\n\n    let listStocked = [];\n\n    let [listItems, updateList] = useState(listStocked);\n\n    //Pour initialiser la liste stockées en local\n    function getStockedList() {\n        get('listTodo').then((listJson) => {\n            if (listJson != null) {\n                listStocked = JSON.parse(listJson);\n\n                updateList(listStocked)\n            }\n        })\n    }\n\n    // appeler la fonction une seule fois pour initialiser les items stockés en local\n    useEffect(() => {\n        getStockedList()\n    }, [])\n\n\n\n    // fonction pour ajouter des items à la liste\n    function addItem(text) {\n\n        // on prépare l'id pour le nouvel objet en prenant le dernier id du tableau actuel et on retire 1 pour débuter à la bonne valeur \n        let lengthList = listItems.length - 1\n\n        const newItem = {\n            id: lengthList++,\n            text: text,\n            checked: false\n        }\n\n        const newTable = listItems.concat([newItem])\n\n        // on ajoute le nouveau tableau au sotckage en local\n        set('listTodo', JSON.stringify(newTable))\n\n        // on update la liste en mémoire\n        updateList(newTable)\n    }\n\n    function toggleItem(id) {\n        const updatedList = listItems.map(item => {\n            if (item.id === id) {\n                item.checked = !item.checked\n            }\n            return item\n        })\n\n        // on ajoute les nouvelles valeurs dans le tableau stocké en local\n        set('listTodo', JSON.stringify(updatedList))\n\n        // on update les nouvelles valeurs en mémoire\n        updateList(updatedList)\n    }\n\n    // fonction pour retirer tous les items de la liste\n    function removeAllItems() {\n\n        // on enlève la liste stockée en local\n        remove('listTodo');\n\n        // on vide la liste stockée en mémoire\n        updateList([]);\n    }\n\n    // compteur tâches à faire\n    let [counterTodo, setCounterTodo] = useState(0);\n\n    function getCheckedCounter() {\n        for (const item of listItems) {\n            if (item.checked === false) {\n                setCounterTodo(counterTodo++)\n                return counterTodo\n            }\n        }\n    }\n\n    useEffect(() => {\n        getCheckedCounter()\n    }, [])\n\n\n\n    return {\n        listItems, addItem, toggleItem, removeAllItems\n    }\n\n}"]},"metadata":{},"sourceType":"module"}