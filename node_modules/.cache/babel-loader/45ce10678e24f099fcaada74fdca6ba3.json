{"ast":null,"code":"import { useStorage } from '@capacitor-community/react-hooks/storage';\nlet tabble = [];\nexport function useToDoList() {\n  const {\n    get,\n    set,\n    remove\n  } = useStorage(); //Pour initialiser la liste stockées en local et la stocker sur la liste temporaire\n\n  const initializeItems2d = () => {\n    get('todos2d').then(valueInitial2d => {\n      if (valueInitial2d != null) {\n        tabble = JSON.parse(valueInitial2d);\n      } else {\n        tabble = ['vide'];\n      }\n    });\n  }; //Pour ajouter des items et les sauvegarder en local : \n\n\n  const addItem = itemValue => {\n    if (itemValue === undefined) {\n      return;\n    }\n\n    if (tabble[0] === 'vide') {\n      tabble = [];\n    } // je fais le tableau en 2 dimensions afin de stocker l'état\n\n\n    tabble.push([itemValue, 'active']);\n    remove('todos2d');\n    set('todos2d', JSON.stringify(tabble));\n  }; //Pour changer l'état d'une entrée\n\n\n  const changeState = key => {\n    const tableContent = tabble[key.index];\n\n    if (tableContent[1] === 'active') {\n      tableContent[1] = 'done';\n    } else if (tableContent[1] === 'done') {\n      tableContent[1] = 'active';\n    } //On actualise les données\n\n\n    tabble[key.index] = tableContent;\n    remove('todos2d');\n    set('todos2d', JSON.stringify(tabble));\n  }; //Pour retirer tous les items stockés dans la liste : \n\n\n  const removeAllItems = () => {\n    remove('todos2d');\n    tabble = ['vide'];\n  };\n\n  return {\n    addItem,\n    removeAllItems,\n    tabble,\n    initializeItems2d,\n    changeState\n  };\n}","map":{"version":3,"sources":["/Users/justinluczak/Documents/COURS CNAM 2EME ANNEE/webmobile/Exercice todolist/todolist/src/hooks/useToDoList.ts"],"names":["useStorage","tabble","useToDoList","get","set","remove","initializeItems2d","then","valueInitial2d","JSON","parse","addItem","itemValue","undefined","push","stringify","changeState","key","tableContent","index","removeAllItems"],"mappings":"AAAA,SAASA,UAAT,QAA2B,0CAA3B;AAEA,IAAIC,MAAa,GAAG,EAApB;AAEA,OAAO,SAASC,WAAT,GAAuB;AAG1B,QAAM;AAAEC,IAAAA,GAAF;AAAOC,IAAAA,GAAP;AAAYC,IAAAA;AAAZ,MAAuBL,UAAU,EAAvC,CAH0B,CAK1B;;AACA,QAAMM,iBAAiB,GAAG,MAAM;AAAEH,IAAAA,GAAG,CAAC,SAAD,CAAH,CAAeI,IAAf,CAAqBC,cAAD,IAAoB;AACtE,UAAIA,cAAc,IAAI,IAAtB,EAA4B;AACxBP,QAAAA,MAAM,GAAGQ,IAAI,CAACC,KAAL,CAAWF,cAAX,CAAT;AACH,OAFD,MAEO;AACHP,QAAAA,MAAM,GAAG,CAAC,MAAD,CAAT;AACH;AACJ,KANiC;AAM/B,GANH,CAN0B,CAc1B;;;AACA,QAAMU,OAAO,GAAIC,SAAD,IAAuB;AAEnC,QAAGA,SAAS,KAAKC,SAAjB,EAA6B;AACzB;AACH;;AAED,QAAIZ,MAAM,CAAC,CAAD,CAAN,KAAc,MAAlB,EAA0B;AACtBA,MAAAA,MAAM,GAAG,EAAT;AACH,KARkC,CAUnC;;;AACAA,IAAAA,MAAM,CAACa,IAAP,CAAY,CAACF,SAAD,EAAY,QAAZ,CAAZ;AACAP,IAAAA,MAAM,CAAC,SAAD,CAAN;AACAD,IAAAA,GAAG,CAAC,SAAD,EAAYK,IAAI,CAACM,SAAL,CAAed,MAAf,CAAZ,CAAH;AACH,GAdD,CAf0B,CA+B1B;;;AACA,QAAMe,WAAW,GAAIC,GAAD,IAAc;AAC9B,UAAMC,YAAY,GAAGjB,MAAM,CAACgB,GAAG,CAACE,KAAL,CAA3B;;AACA,QAAID,YAAY,CAAC,CAAD,CAAZ,KAAoB,QAAxB,EAAkC;AAC9BA,MAAAA,YAAY,CAAC,CAAD,CAAZ,GAAkB,MAAlB;AACH,KAFD,MAEO,IAAIA,YAAY,CAAC,CAAD,CAAZ,KAAoB,MAAxB,EAAgC;AACnCA,MAAAA,YAAY,CAAC,CAAD,CAAZ,GAAkB,QAAlB;AACH,KAN6B,CAQ9B;;;AACAjB,IAAAA,MAAM,CAACgB,GAAG,CAACE,KAAL,CAAN,GAAoBD,YAApB;AACAb,IAAAA,MAAM,CAAC,SAAD,CAAN;AACAD,IAAAA,GAAG,CAAC,SAAD,EAAYK,IAAI,CAACM,SAAL,CAAed,MAAf,CAAZ,CAAH;AACH,GAZD,CAhC0B,CA8C1B;;;AACA,QAAMmB,cAAc,GAAG,MAAM;AAEzBf,IAAAA,MAAM,CAAC,SAAD,CAAN;AACAJ,IAAAA,MAAM,GAAG,CAAC,MAAD,CAAT;AACH,GAJD;;AAMA,SAAO;AACHU,IAAAA,OADG;AACMS,IAAAA,cADN;AACsBnB,IAAAA,MADtB;AAC8BK,IAAAA,iBAD9B;AACiDU,IAAAA;AADjD,GAAP;AAIH","sourcesContent":["import { useStorage } from '@capacitor-community/react-hooks/storage';\n\nlet tabble: any[] = [];\n\nexport function useToDoList() {\n    \n\n    const { get, set, remove } = useStorage();\n\n    //Pour initialiser la liste stockées en local et la stocker sur la liste temporaire\n    const initializeItems2d = () => { get('todos2d').then((valueInitial2d) => {\n        if (valueInitial2d != null) {        \n            tabble = JSON.parse(valueInitial2d)  \n        } else {\n            tabble = ['vide']\n        }\n    })}\n\n    //Pour ajouter des items et les sauvegarder en local : \n    const addItem = (itemValue: string) => {\n\n        if(itemValue === undefined ) {\n            return\n        }\n\n        if (tabble[0] === 'vide') {\n            tabble = []\n        }\n\n        // je fais le tableau en 2 dimensions afin de stocker l'état\n        tabble.push([itemValue, 'active'])\n        remove('todos2d')\n        set('todos2d', JSON.stringify(tabble))\n    }\n\n    //Pour changer l'état d'une entrée\n    const changeState = (key: any) => {\n        const tableContent = tabble[key.index]\n        if (tableContent[1] === 'active') {\n            tableContent[1] = 'done'\n        } else if (tableContent[1] === 'done') {\n            tableContent[1] = 'active'\n        }\n\n        //On actualise les données\n        tabble[key.index] = tableContent\n        remove('todos2d')\n        set('todos2d', JSON.stringify(tabble))\n    } \n\n    //Pour retirer tous les items stockés dans la liste : \n    const removeAllItems = () => {\n\n        remove('todos2d')\n        tabble = ['vide']\n    }    \n\n    return {\n        addItem, removeAllItems, tabble, initializeItems2d, changeState\n    }\n\n}"]},"metadata":{},"sourceType":"module"}