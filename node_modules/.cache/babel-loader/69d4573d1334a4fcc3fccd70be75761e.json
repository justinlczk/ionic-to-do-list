{"ast":null,"code":"import { useStorage } from '@capacitor-community/react-hooks/storage';\nimport { useState } from 'react';\nlet counter = 0;\nexport function useToDoList() {\n  const {\n    get,\n    set,\n    remove\n  } = useStorage();\n  let listStocked = []; //Pour initialiser la liste stockées en local et la stocker sur la liste temporaire\n\n  function getStockedList() {\n    get('listTodo').then(listJson => {\n      if (listJson != null) {\n        listStocked = JSON.parse(listJson);\n        console.log(listStocked);\n        return listStocked;\n      }\n    });\n  }\n\n  getStockedList();\n  let [listItems, updateList] = useState(listStocked);\n\n  function addItem(text) {\n    const newItem = {\n      id: counter++,\n      text: text,\n      checked: false\n    };\n    const newTable = listItems.concat([newItem]);\n    set('listTodo', JSON.stringify(newTable));\n    updateList(newTable);\n  }\n\n  function toggleItem(id) {\n    const updatedList = listItems.map(item => {\n      if (item.id === id) {\n        item.checked = !item.checked;\n      }\n\n      return item;\n    });\n    set('listTodo', JSON.stringify(updatedList));\n    updateList(updatedList);\n  }\n\n  return {\n    listItems,\n    addItem,\n    toggleItem\n  };\n}","map":{"version":3,"sources":["/Users/justinluczak/Documents/COURS CNAM 2EME ANNEE/webmobile/github/luczak-justin_todo-list/src/hooks/useToDoList.ts"],"names":["useStorage","useState","counter","useToDoList","get","set","remove","listStocked","getStockedList","then","listJson","JSON","parse","console","log","listItems","updateList","addItem","text","newItem","id","checked","newTable","concat","stringify","toggleItem","updatedList","map","item"],"mappings":"AAAA,SAASA,UAAT,QAA2B,0CAA3B;AAEA,SAASC,QAAT,QAAyB,OAAzB;AAEA,IAAIC,OAAO,GAAG,CAAd;AAEA,OAAO,SAASC,WAAT,GAAuB;AAK1B,QAAM;AAAEC,IAAAA,GAAF;AAAOC,IAAAA,GAAP;AAAYC,IAAAA;AAAZ,MAAuBN,UAAU,EAAvC;AAEA,MAAIO,WAAW,GAAG,EAAlB,CAP0B,CAS1B;;AACA,WAASC,cAAT,GAA0B;AACtBJ,IAAAA,GAAG,CAAC,UAAD,CAAH,CAAgBK,IAAhB,CAAsBC,QAAD,IAAc;AAC/B,UAAGA,QAAQ,IAAI,IAAf,EAAqB;AACjBH,QAAAA,WAAW,GAAGI,IAAI,CAACC,KAAL,CAAWF,QAAX,CAAd;AACAG,QAAAA,OAAO,CAACC,GAAR,CAAYP,WAAZ;AAEA,eAAOA,WAAP;AACH;AACJ,KAPD;AAQH;;AAEDC,EAAAA,cAAc;AAId,MAAI,CAACO,SAAD,EAAYC,UAAZ,IAA0Bf,QAAQ,CAACM,WAAD,CAAtC;;AAEA,WAASU,OAAT,CAAiBC,IAAjB,EAAuB;AACnB,UAAMC,OAAO,GAAG;AACZC,MAAAA,EAAE,EAAElB,OAAO,EADC;AAEZgB,MAAAA,IAAI,EAAEA,IAFM;AAGZG,MAAAA,OAAO,EAAE;AAHG,KAAhB;AAMA,UAAMC,QAAQ,GAAGP,SAAS,CAACQ,MAAV,CAAiB,CAACJ,OAAD,CAAjB,CAAjB;AAEAd,IAAAA,GAAG,CAAC,UAAD,EAAaM,IAAI,CAACa,SAAL,CAAeF,QAAf,CAAb,CAAH;AACAN,IAAAA,UAAU,CAACM,QAAD,CAAV;AACH;;AAED,WAASG,UAAT,CAAoBL,EAApB,EAAwB;AACpB,UAAMM,WAAW,GAAGX,SAAS,CAACY,GAAV,CAAcC,IAAI,IAAI;AACtC,UAAIA,IAAI,CAACR,EAAL,KAAYA,EAAhB,EAAoB;AAChBQ,QAAAA,IAAI,CAACP,OAAL,GAAe,CAACO,IAAI,CAACP,OAArB;AACH;;AACD,aAAOO,IAAP;AACH,KALmB,CAApB;AAOAvB,IAAAA,GAAG,CAAC,UAAD,EAAaM,IAAI,CAACa,SAAL,CAAeE,WAAf,CAAb,CAAH;AACAV,IAAAA,UAAU,CAACU,WAAD,CAAV;AACH;;AAGD,SAAO;AACHX,IAAAA,SADG;AACQE,IAAAA,OADR;AACiBQ,IAAAA;AADjB,GAAP;AAIH","sourcesContent":["import { useStorage } from '@capacitor-community/react-hooks/storage';\nimport { verify } from 'crypto';\nimport { useState } from 'react';\n\nlet counter = 0\n\nexport function useToDoList() {\n\n\n\n\n    const { get, set, remove } = useStorage();\n\n    let listStocked = [];\n\n    //Pour initialiser la liste stockées en local et la stocker sur la liste temporaire\n    function getStockedList() {\n        get('listTodo').then((listJson) => {\n            if(listJson != null) {\n                listStocked = JSON.parse(listJson);\n                console.log(listStocked);\n\n                return listStocked\n            }\n        })\n    }\n\n    getStockedList()\n\n    \n    \n    let [listItems, updateList] = useState(listStocked);\n\n    function addItem(text) {\n        const newItem = {\n            id: counter++,\n            text: text,\n            checked: false\n        }\n\n        const newTable = listItems.concat([newItem])\n\n        set('listTodo', JSON.stringify(newTable))\n        updateList(newTable)\n    }\n\n    function toggleItem(id) {\n        const updatedList = listItems.map(item => {\n            if (item.id === id) {\n                item.checked = !item.checked\n            }\n            return item\n        })\n\n        set('listTodo', JSON.stringify(updatedList))\n        updateList(updatedList)\n    }\n\n\n    return {\n        listItems, addItem, toggleItem\n    }\n\n}"]},"metadata":{},"sourceType":"module"}