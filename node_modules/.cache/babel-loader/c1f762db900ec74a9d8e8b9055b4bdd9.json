{"ast":null,"code":"var _jsxFileName = \"/Users/justinluczak/Documents/COURS CNAM 2EME ANNEE/webmobile/github/luczak-justin_todo-list/src/pages/Home.tsx\";\nimport { IonContent, IonHeader, IonPage, IonTitle, IonToolbar, IonList, IonItem, IonLabel, IonInput, IonButton, IonCheckbox, IonIcon, IonSegment, IonSegmentButton, IonBadge, IonActionSheet, IonAlert } from '@ionic/react';\nimport React from 'react';\nimport './Home.css';\nimport { useToDoList } from '../hooks/useToDoList';\nimport { useState } from \"react\";\nimport { create, trash, close } from 'ionicons/icons';\n\nconst Home = () => {\n  // import des fonctions et variables\n  const {\n    addItem,\n    listItems,\n    toggleItem,\n    removeAllItems,\n    counterTodo,\n    removeCounterTodo,\n    addCounterTodo,\n    removeItem,\n    modifieItem\n  } = useToDoList(); // texte à ajouter pour un nouvel item\n\n  const [text, setText] = useState(); // état du tri de la liste\n\n  let [segmentValue, setSegmentValue] = useState('all'); // état de l'affichage de la feuille d'action\n\n  let [showActionSheet, setShowActionSheet] = useState(false); // état de l'affichage de l'alerte de modification de l'item\n\n  let [showModifieAlert, setShowModifieAlert] = useState(false); // sélecteur de l'id de l'item à modifier ou à supprimer\n\n  let [itemToModifie, setItemToModifie] = useState(); // fonction pour afficher les items dans la liste\n\n  const displayItems = value => {\n    // afficher un message différent si la liste est vide\n    if (listItems.length === 0) {\n      return /*#__PURE__*/React.createElement(IonItem, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 14\n        }\n      }, /*#__PURE__*/React.createElement(IonLabel, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 23\n        }\n      }, \"F\\xE9licitation votre liste est vide\"));\n    } // sinon on affiche la liste \n    else {\n        // pour afficher tous les items\n        if (value === 'all') {\n          return listItems.map(item => {\n            // ne pas afficher les items supprimés manuellement\n            // trie des items non cochés afin de les compter\n            if (item != undefined && item.checked === false) {\n              return /*#__PURE__*/React.createElement(IonItem, {\n                key: item.id,\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 48,\n                  columnNumber: 15\n                }\n              }, /*#__PURE__*/React.createElement(IonCheckbox, {\n                slot: \"start\",\n                color: \"primary\",\n                checked: item.checked,\n                onIonChange: e => {\n                  toggleItem(item.id);\n                  removeCounterTodo();\n                },\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 49,\n                  columnNumber: 17\n                }\n              }), /*#__PURE__*/React.createElement(IonLabel, {\n                className: item.checked ? 'checked' : '',\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 53,\n                  columnNumber: 17\n                }\n              }, item.text), /*#__PURE__*/React.createElement(IonButton, {\n                onClick: () => {\n                  setShowActionSheet(true);\n                  setItemToModifie(item.id);\n                },\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 55,\n                  columnNumber: 17\n                }\n              }, /*#__PURE__*/React.createElement(IonIcon, {\n                icon: create,\n                color: \"light\",\n                slot: \"end\",\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 58,\n                  columnNumber: 20\n                }\n              })), /*#__PURE__*/React.createElement(IonActionSheet, {\n                isOpen: showActionSheet,\n                onDidDismiss: () => setShowActionSheet(false),\n                cssClass: \"my-custom-class\",\n                buttons: [{\n                  text: 'Supprimer',\n                  role: 'destructive',\n                  icon: trash,\n                  handler: () => {\n                    removeItem(itemToModifie);\n                  }\n                }, {\n                  text: 'Modifier',\n                  icon: create,\n                  handler: () => {\n                    setShowModifieAlert(true);\n                  }\n                }, {\n                  text: 'Annuler',\n                  icon: close,\n                  role: 'cancel'\n                }],\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 61,\n                  columnNumber: 17\n                }\n              }), /*#__PURE__*/React.createElement(IonAlert, {\n                isOpen: showModifieAlert,\n                onDidDismiss: () => setShowModifieAlert(false),\n                header: 'Renommez votre tâche',\n                inputs: [{\n                  name: 'text',\n                  type: 'text',\n                  placeholder: 'Nouveau nom de la tâche'\n                }],\n                buttons: [{\n                  text: 'Annuler',\n                  role: 'cancel',\n                  cssClass: 'secondary'\n                }, {\n                  text: 'Valider',\n                  handler: data => {\n                    modifieItem(itemToModifie, data.text);\n                  }\n                }],\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 89,\n                  columnNumber: 17\n                }\n              }));\n            } // on affiche les items cochés sans les compter\n            else if (item != undefined) {\n                return /*#__PURE__*/React.createElement(IonItem, {\n                  key: item.id,\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 120,\n                    columnNumber: 15\n                  }\n                }, /*#__PURE__*/React.createElement(IonCheckbox, {\n                  slot: \"start\",\n                  color: \"primary\",\n                  checked: item.checked,\n                  onIonChange: e => {\n                    toggleItem(item.id);\n                    addCounterTodo();\n                  },\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 121,\n                    columnNumber: 17\n                  }\n                }), /*#__PURE__*/React.createElement(IonLabel, {\n                  className: item.checked ? 'checked' : '',\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 125,\n                    columnNumber: 17\n                  }\n                }, item.text), /*#__PURE__*/React.createElement(IonButton, {\n                  onClick: () => {\n                    setShowActionSheet(true);\n                    setItemToModifie(item.id);\n                  },\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 127,\n                    columnNumber: 17\n                  }\n                }, /*#__PURE__*/React.createElement(IonIcon, {\n                  icon: create,\n                  color: \"light\",\n                  slot: \"end\",\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 130,\n                    columnNumber: 20\n                  }\n                })), /*#__PURE__*/React.createElement(IonActionSheet, {\n                  isOpen: showActionSheet,\n                  onDidDismiss: () => setShowActionSheet(false),\n                  cssClass: \"my-custom-class\",\n                  buttons: [{\n                    text: 'Supprimer',\n                    role: 'destructive',\n                    icon: trash,\n                    handler: () => {\n                      removeItem(itemToModifie);\n                    }\n                  }, {\n                    text: 'Modifier',\n                    icon: create,\n                    handler: () => {\n                      setShowModifieAlert(true);\n                    }\n                  }, {\n                    text: 'Annuler',\n                    icon: close,\n                    role: 'cancel'\n                  }],\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 133,\n                    columnNumber: 17\n                  }\n                }), /*#__PURE__*/React.createElement(IonAlert, {\n                  isOpen: showModifieAlert,\n                  onDidDismiss: () => setShowModifieAlert(false),\n                  header: 'Renommez votre tâche',\n                  inputs: [{\n                    name: 'text',\n                    type: 'text',\n                    placeholder: 'Nouveau nom de la tâche'\n                  }],\n                  buttons: [{\n                    text: 'Annuler',\n                    role: 'cancel',\n                    cssClass: 'secondary'\n                  }, {\n                    text: 'Valider',\n                    handler: data => {\n                      modifieItem(itemToModifie, data.text);\n                    }\n                  }],\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 159,\n                    columnNumber: 17\n                  }\n                }));\n              }\n          });\n        } // trie des items non cochés\n        else if (value === 'unchecked') {\n            return listItems.map(item => {\n              // ne pas afficher les items supprimés manuellement\n              // traite uniquement les items non cochés\n              if (item != undefined && item.checked === false) {\n                return /*#__PURE__*/React.createElement(IonItem, {\n                  key: item.id,\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 193,\n                    columnNumber: 17\n                  }\n                }, /*#__PURE__*/React.createElement(IonCheckbox, {\n                  slot: \"start\",\n                  color: \"primary\",\n                  checked: item.checked,\n                  onIonChange: e => {\n                    toggleItem(item.id);\n                    removeCounterTodo();\n                  },\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 194,\n                    columnNumber: 19\n                  }\n                }), /*#__PURE__*/React.createElement(IonLabel, {\n                  className: item.checked ? 'checked' : '',\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 198,\n                    columnNumber: 19\n                  }\n                }, item.text), /*#__PURE__*/React.createElement(IonButton, {\n                  onClick: () => {\n                    setShowActionSheet(true);\n                    setItemToModifie(item.id);\n                  },\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 200,\n                    columnNumber: 19\n                  }\n                }, /*#__PURE__*/React.createElement(IonIcon, {\n                  icon: create,\n                  color: \"light\",\n                  slot: \"end\",\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 203,\n                    columnNumber: 22\n                  }\n                })), /*#__PURE__*/React.createElement(IonActionSheet, {\n                  isOpen: showActionSheet,\n                  onDidDismiss: () => setShowActionSheet(false),\n                  cssClass: \"my-custom-class\",\n                  buttons: [{\n                    text: 'Supprimer',\n                    role: 'destructive',\n                    icon: trash,\n                    handler: () => {\n                      removeItem(itemToModifie);\n                    }\n                  }, {\n                    text: 'Modifier',\n                    icon: create,\n                    handler: () => {\n                      setShowModifieAlert(true);\n                    }\n                  }, {\n                    text: 'Annuler',\n                    icon: close,\n                    role: 'cancel'\n                  }],\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 206,\n                    columnNumber: 19\n                  }\n                }), /*#__PURE__*/React.createElement(IonAlert, {\n                  isOpen: showModifieAlert,\n                  onDidDismiss: () => setShowModifieAlert(false),\n                  header: 'Renommez votre tâche',\n                  inputs: [{\n                    name: 'text',\n                    type: 'text',\n                    placeholder: 'Nouveau nom de la tâche'\n                  }],\n                  buttons: [{\n                    text: 'Annuler',\n                    role: 'cancel',\n                    cssClass: 'secondary'\n                  }, {\n                    text: 'Valider',\n                    handler: data => {\n                      modifieItem(itemToModifie, data.text);\n                    }\n                  }],\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 232,\n                    columnNumber: 19\n                  }\n                }));\n              }\n            });\n          }\n      }\n  };\n\n  return /*#__PURE__*/React.createElement(IonPage, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(IonHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(IonToolbar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(IonTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 11\n    }\n  }, \"To do list\"))), /*#__PURE__*/React.createElement(IonContent, {\n    fullscreen: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(IonHeader, {\n    collapse: \"condense\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(IonToolbar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(IonTitle, {\n    size: \"large\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 13\n    }\n  }, \"To do list\"))), /*#__PURE__*/React.createElement(IonSegment, {\n    onIonChange: e => setSegmentValue(e.detail.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(IonSegmentButton, {\n    value: \"all\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(IonLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 13\n    }\n  }, \"Tout\")), /*#__PURE__*/React.createElement(IonSegmentButton, {\n    value: \"unchecked\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(IonLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 13\n    }\n  }, \"\\xC0 faire \", /*#__PURE__*/React.createElement(IonBadge, {\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 31\n    }\n  }, counterTodo)))), /*#__PURE__*/React.createElement(IonList, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 9\n    }\n  }, displayItems(segmentValue)), /*#__PURE__*/React.createElement(IonItem, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(IonButton, {\n    color: \"primary\",\n    type: \"submit\",\n    onClick: () => {\n      removeAllItems();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 11\n    }\n  }, \"Vider totalement la liste\")), /*#__PURE__*/React.createElement(IonItem, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(IonInput, {\n    placeholder: \"Qu'avez-vous en t\\xEAte ?\",\n    inputmode: \"text\",\n    clearInput: true,\n    autofocus: true,\n    required: true,\n    onIonChange: e => {\n      setText(e.detail.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(IonButton, {\n    color: \"primary\",\n    type: \"submit\",\n    onClick: () => {\n      addItem(text);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 11\n    }\n  }, \"Cr\\xE9er\"))));\n};\n\nexport default Home;","map":{"version":3,"sources":["/Users/justinluczak/Documents/COURS CNAM 2EME ANNEE/webmobile/github/luczak-justin_todo-list/src/pages/Home.tsx"],"names":["IonContent","IonHeader","IonPage","IonTitle","IonToolbar","IonList","IonItem","IonLabel","IonInput","IonButton","IonCheckbox","IonIcon","IonSegment","IonSegmentButton","IonBadge","IonActionSheet","IonAlert","React","useToDoList","useState","create","trash","close","Home","addItem","listItems","toggleItem","removeAllItems","counterTodo","removeCounterTodo","addCounterTodo","removeItem","modifieItem","text","setText","segmentValue","setSegmentValue","showActionSheet","setShowActionSheet","showModifieAlert","setShowModifieAlert","itemToModifie","setItemToModifie","displayItems","value","length","map","item","undefined","checked","id","e","role","icon","handler","name","type","placeholder","cssClass","data","detail"],"mappings":"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","sourcesContent":["import { IonContent, IonHeader, IonPage, IonTitle, IonToolbar, IonList, IonItem, IonLabel, IonInput, IonButton, IonCheckbox, IonIcon, IonSegment, IonSegmentButton, IonBadge, IonActionSheet, IonAlert } from '@ionic/react';\nimport React from 'react';\nimport './Home.css';\nimport { useToDoList } from '../hooks/useToDoList';\nimport { useState } from \"react\";\nimport { create, trash, close } from 'ionicons/icons';\n\n\nconst Home: React.FC = () => {\n  // import des fonctions et variables\n  const { addItem, listItems, toggleItem, removeAllItems, counterTodo, removeCounterTodo, addCounterTodo, removeItem, modifieItem } = useToDoList();\n\n  // texte à ajouter pour un nouvel item\n  const [text, setText] = useState<any>();\n\n  // état du tri de la liste\n  let [segmentValue, setSegmentValue] = useState('all');\n\n  // état de l'affichage de la feuille d'action\n  let [showActionSheet, setShowActionSheet] = useState(false);\n\n  // état de l'affichage de l'alerte de modification de l'item\n  let [showModifieAlert, setShowModifieAlert] = useState(false);\n\n  // sélecteur de l'id de l'item à modifier ou à supprimer\n  let [itemToModifie, setItemToModifie] = useState<number>();\n\n  // fonction pour afficher les items dans la liste\n  const displayItems = (value) => {\n\n    // afficher un message différent si la liste est vide\n    if (listItems.length === 0) {\n      return <IonItem><IonLabel>Félicitation votre liste est vide</IonLabel></IonItem>\n    }\n\n    // sinon on affiche la liste \n    else {\n\n      // pour afficher tous les items\n      if (value === 'all') {\n\n        return listItems.map((item) => {\n\n          // ne pas afficher les items supprimés manuellement\n          // trie des items non cochés afin de les compter\n          if (item != undefined && item.checked === false) {\n            return (\n              <IonItem key={item.id}>\n                <IonCheckbox slot=\"start\" color=\"primary\" checked={item.checked} onIonChange={(e) => {\n                  toggleItem(item.id)\n                  removeCounterTodo()\n                }} />\n                <IonLabel className={item.checked ? 'checked' : ''}>{item.text}</IonLabel>\n\n                <IonButton onClick={() => {\n                  setShowActionSheet(true)\n                  setItemToModifie(item.id)\n                }}><IonIcon icon={create} color=\"light\" slot=\"end\" /></IonButton>\n\n\n                <IonActionSheet\n                  isOpen={showActionSheet}\n                  onDidDismiss={() => setShowActionSheet(false)}\n                  cssClass='my-custom-class'\n                  buttons={[{\n                    text: 'Supprimer',\n                    role: 'destructive',\n                    icon: trash,\n                    handler: () => {\n                      removeItem(itemToModifie)\n                    }\n                  },\n                  {\n                    text: 'Modifier',\n                    icon: create,\n                    handler: () => {\n                      setShowModifieAlert(true)\n                    }\n                  }, {\n                    text: 'Annuler',\n                    icon: close,\n                    role: 'cancel',\n                  }]}\n                >\n                </IonActionSheet>\n\n\n\n                <IonAlert\n                  isOpen={showModifieAlert}\n                  onDidDismiss={() => setShowModifieAlert(false)}\n                  header={'Renommez votre tâche'}\n                  inputs={[\n                    {\n                      name: 'text',\n                      type: 'text',\n                      placeholder: 'Nouveau nom de la tâche',\n                    }]}\n                  buttons={[\n                    {\n                      text: 'Annuler',\n                      role: 'cancel',\n                      cssClass: 'secondary',\n                    },\n                    {\n                      text: 'Valider',\n                      handler: data => {\n                        modifieItem(itemToModifie, data.text)\n                      }\n                    }\n                  ]}\n                />\n              </IonItem>\n            )\n          }\n\n          // on affiche les items cochés sans les compter\n          else if (item != undefined) {\n            return (\n              <IonItem key={item.id}>\n                <IonCheckbox slot=\"start\" color=\"primary\" checked={item.checked} onIonChange={(e) => {\n                  toggleItem(item.id)\n                  addCounterTodo()\n                }} />\n                <IonLabel className={item.checked ? 'checked' : ''}>{item.text}</IonLabel>\n\n                <IonButton onClick={() => {\n                  setShowActionSheet(true)\n                  setItemToModifie(item.id)\n                }}><IonIcon icon={create} color=\"light\" slot=\"end\" /></IonButton>\n\n\n                <IonActionSheet\n                  isOpen={showActionSheet}\n                  onDidDismiss={() => setShowActionSheet(false)}\n                  cssClass='my-custom-class'\n                  buttons={[{\n                    text: 'Supprimer',\n                    role: 'destructive',\n                    icon: trash,\n                    handler: () => {\n                      removeItem(itemToModifie)\n                    }\n                  },\n                  {\n                    text: 'Modifier',\n                    icon: create,\n                    handler: () => {\n                      setShowModifieAlert(true)\n                    }\n                  }, {\n                    text: 'Annuler',\n                    icon: close,\n                    role: 'cancel',\n                  }]}\n                >\n                </IonActionSheet>\n\n                <IonAlert\n                  isOpen={showModifieAlert}\n                  onDidDismiss={() => setShowModifieAlert(false)}\n                  header={'Renommez votre tâche'}\n                  inputs={[\n                    {\n                      name: 'text',\n                      type: 'text',\n                      placeholder: 'Nouveau nom de la tâche',\n                    }]}\n                  buttons={[\n                    {\n                      text: 'Annuler',\n                      role: 'cancel',\n                      cssClass: 'secondary',\n                    },\n                    {\n                      text: 'Valider',\n                      handler: data => {\n                        modifieItem(itemToModifie, data.text)\n                      }\n                    }]} /></IonItem>)\n          }\n        })\n      }\n\n      // trie des items non cochés\n      else if (value === 'unchecked') {\n        return (\n          listItems.map((item) => {\n            // ne pas afficher les items supprimés manuellement\n            // traite uniquement les items non cochés\n            if (item != undefined && item.checked === false) {\n              return (\n                < IonItem key={item.id} >\n                  <IonCheckbox slot=\"start\" color=\"primary\" checked={item.checked} onIonChange={(e) => {\n                    toggleItem(item.id)\n                    removeCounterTodo()\n                  }} />\n                  <IonLabel className={item.checked ? 'checked' : ''}>{item.text}</IonLabel>\n\n                  <IonButton onClick={() => {\n                    setShowActionSheet(true)\n                    setItemToModifie(item.id)\n                  }}><IonIcon icon={create} color=\"light\" slot=\"end\" /></IonButton>\n\n\n                  <IonActionSheet\n                    isOpen={showActionSheet}\n                    onDidDismiss={() => setShowActionSheet(false)}\n                    cssClass='my-custom-class'\n                    buttons={[{\n                      text: 'Supprimer',\n                      role: 'destructive',\n                      icon: trash,\n                      handler: () => {\n                        removeItem(itemToModifie)\n                      }\n                    },\n                    {\n                      text: 'Modifier',\n                      icon: create,\n                      handler: () => {\n                        setShowModifieAlert(true)\n                      }\n                    }, {\n                      text: 'Annuler',\n                      icon: close,\n                      role: 'cancel',\n                    }]}\n                  >\n                  </IonActionSheet>\n\n                  <IonAlert\n                    isOpen={showModifieAlert}\n                    onDidDismiss={() => setShowModifieAlert(false)}\n                    header={'Renommez votre tâche'}\n                    inputs={[\n                      {\n                        name: 'text',\n                        type: 'text',\n                        placeholder: 'Nouveau nom de la tâche',\n                      }]}\n                    buttons={[\n                      {\n                        text: 'Annuler',\n                        role: 'cancel',\n                        cssClass: 'secondary',\n                      },\n                      {\n                        text: 'Valider',\n                        handler: data => {\n                          modifieItem(itemToModifie, data.text)\n                        }\n                      }\n                    ]}\n                  /></IonItem >)\n            }\n          }))\n      }\n    }\n  }\n\n\n  return (\n    <IonPage>\n      <IonHeader>\n        <IonToolbar>\n          <IonTitle>To do list</IonTitle>\n        </IonToolbar>\n      </IonHeader>\n      <IonContent fullscreen>\n\n        <IonHeader collapse=\"condense\">\n          <IonToolbar>\n            <IonTitle size=\"large\">To do list</IonTitle>\n          </IonToolbar>\n        </IonHeader>\n\n        <IonSegment onIonChange={e => setSegmentValue(e.detail.value)}>\n          <IonSegmentButton value=\"all\">\n            <IonLabel>Tout</IonLabel>\n          </IonSegmentButton>\n          <IonSegmentButton value=\"unchecked\">\n            <IonLabel>À faire <IonBadge color=\"primary\">{counterTodo}</IonBadge></IonLabel>\n\n          </IonSegmentButton>\n        </IonSegment>\n\n\n        <IonList>\n          {\n            displayItems(segmentValue)\n          }\n        </IonList>\n\n\n        <IonItem>\n          <IonButton color=\"primary\" type=\"submit\" onClick={() => { removeAllItems() }}>Vider totalement la liste</IonButton>\n        </IonItem>\n\n\n\n        <IonItem>\n          <IonInput placeholder=\"Qu'avez-vous en tête ?\" inputmode=\"text\" clearInput autofocus required onIonChange={e => { setText(e.detail.value); }}></IonInput>\n          <IonButton color=\"primary\" type=\"submit\" onClick={() => { addItem(text) }}>Créer</IonButton>\n        </IonItem>\n\n\n\n      </IonContent>\n\n\n    </IonPage>\n  );\n};\n\nexport default Home;"]},"metadata":{},"sourceType":"module"}