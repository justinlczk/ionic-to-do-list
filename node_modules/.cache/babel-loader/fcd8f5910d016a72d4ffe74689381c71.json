{"ast":null,"code":"import { useStorage } from '@capacitor-community/react-hooks/storage';\nlet tableauToDo = [];\nlet tableauNew = [];\nexport function useToDoList() {\n  const {\n    get,\n    set,\n    remove,\n    getKeys,\n    clear\n  } = useStorage(); //Pour initialiser la liste stockées en local et la stocker sur la liste temporaire\n\n  const initializeItems = () => {\n    get('todos').then(valueInitial => {\n      if (valueInitial != null) {\n        const tableauActual = JSON.parse(valueInitial);\n        tableauToDo = tableauActual;\n      }\n    });\n  };\n\n  const initializeItems2d = () => {\n    get('todos2d').then(valueInitial => {\n      if (valueInitial != null) {\n        const tableauAct = JSON.parse(valueInitial);\n        tableauN = tableauAct;\n      }\n    });\n  }; //Pour ajouter des items et les sauvegarder en local : \n\n\n  const addItem = itemValue => {\n    tableauToDo.push(itemValue);\n    remove('todos');\n    set('todos', JSON.stringify(tableauToDo)); // je fais le tableau en 2 dimensions afin de stocker l'état\n\n    tableauNew.push([itemValue, 'active']);\n    remove('todos2d');\n    set('todos2d', JSON.stringify(tableauNew));\n  }; //Pour retirer tous les items stockés dans la liste : \n\n\n  const removeAllItems = () => {\n    remove('todos');\n    tableauToDo = [];\n  }; //tableauNew = [\n  //     [ 'a',\n  //     'done'], ['b', 'active']\n  // ]\n  // console.log(JSON.stringify(tableauNew));\n  // console.log(JSON.parse(JSON.stringify(tableauNew)))\n\n\n  return {\n    addItem,\n    tableauToDo,\n    removeAllItems,\n    initializeItems\n  };\n}","map":{"version":3,"sources":["/Users/justinluczak/Documents/COURS CNAM 2EME ANNEE/webmobile/Exercice todolist/todolist/src/hooks/useToDoList.ts"],"names":["useStorage","tableauToDo","tableauNew","useToDoList","get","set","remove","getKeys","clear","initializeItems","then","valueInitial","tableauActual","JSON","parse","initializeItems2d","tableauAct","tableauN","addItem","itemValue","push","stringify","removeAllItems"],"mappings":"AAGA,SAASA,UAAT,QAA8D,0CAA9D;AAGA,IAAIC,WAAqB,GAAG,EAA5B;AACA,IAAIC,UAAiB,GAAG,EAAxB;AAEA,OAAO,SAASC,WAAT,GAAuB;AAE1B,QAAM;AAAEC,IAAAA,GAAF;AAAOC,IAAAA,GAAP;AAAYC,IAAAA,MAAZ;AAAoBC,IAAAA,OAApB;AAA6BC,IAAAA;AAA7B,MAAuCR,UAAU,EAAvD,CAF0B,CAI1B;;AACA,QAAMS,eAAe,GAAG,MAAM;AAAEL,IAAAA,GAAG,CAAC,OAAD,CAAH,CAAaM,IAAb,CAAmBC,YAAD,IAAkB;AAChE,UAAIA,YAAY,IAAI,IAApB,EAA0B;AACtB,cAAMC,aAAa,GAAGC,IAAI,CAACC,KAAL,CAAWH,YAAX,CAAtB;AACAV,QAAAA,WAAW,GAAGW,aAAd;AACH;AACJ,KAL+B;AAK7B,GALH;;AAOA,QAAMG,iBAAiB,GAAG,MAAM;AAAEX,IAAAA,GAAG,CAAC,SAAD,CAAH,CAAeM,IAAf,CAAqBC,YAAD,IAAkB;AACpE,UAAIA,YAAY,IAAI,IAApB,EAA0B;AACtB,cAAMK,UAAU,GAAGH,IAAI,CAACC,KAAL,CAAWH,YAAX,CAAnB;AACAM,QAAAA,QAAQ,GAAGD,UAAX;AACH;AACJ,KALiC;AAK/B,GALH,CAZ0B,CAmB1B;;;AACA,QAAME,OAAO,GAAIC,SAAD,IAAuB;AACnClB,IAAAA,WAAW,CAACmB,IAAZ,CAAiBD,SAAjB;AACAb,IAAAA,MAAM,CAAC,OAAD,CAAN;AACAD,IAAAA,GAAG,CAAC,OAAD,EAAUQ,IAAI,CAACQ,SAAL,CAAepB,WAAf,CAAV,CAAH,CAHmC,CAKnC;;AACAC,IAAAA,UAAU,CAACkB,IAAX,CAAgB,CAACD,SAAD,EAAY,QAAZ,CAAhB;AACAb,IAAAA,MAAM,CAAC,SAAD,CAAN;AACAD,IAAAA,GAAG,CAAC,SAAD,EAAYQ,IAAI,CAACQ,SAAL,CAAenB,UAAf,CAAZ,CAAH;AACH,GATD,CApB0B,CA+B1B;;;AACA,QAAMoB,cAAc,GAAG,MAAM;AACzBhB,IAAAA,MAAM,CAAC,OAAD,CAAN;AACAL,IAAAA,WAAW,GAAG,EAAd;AACH,GAHD,CAhC0B,CAqC1B;AACA;AACA;AACA;AAEA;AAEA;;;AAIA,SAAO;AACHiB,IAAAA,OADG;AACMjB,IAAAA,WADN;AACmBqB,IAAAA,cADnB;AACmCb,IAAAA;AADnC,GAAP;AAIH","sourcesContent":["import { useState, useEffect, useCallback } from \"react\";\nimport { isPlatform } from '@ionic/react';\nimport { Plugins } from '@capacitor/core';\nimport { useStorage, useStorageItem, availableFeatures } from '@capacitor-community/react-hooks/storage';\n\n\nlet tableauToDo: string[] = [];\nlet tableauNew: any[] = [];\n\nexport function useToDoList() {\n\n    const { get, set, remove, getKeys, clear } = useStorage();\n\n    //Pour initialiser la liste stockées en local et la stocker sur la liste temporaire\n    const initializeItems = () => { get('todos').then((valueInitial) => {\n        if (valueInitial != null) {\n            const tableauActual = JSON.parse(valueInitial)           \n            tableauToDo = tableauActual\n        }\n    })}\n\n    const initializeItems2d = () => { get('todos2d').then((valueInitial) => {\n        if (valueInitial != null) {\n            const tableauAct = JSON.parse(valueInitial)           \n            tableauN = tableauAct\n        }\n    })}\n\n    //Pour ajouter des items et les sauvegarder en local : \n    const addItem = (itemValue: string) => {\n        tableauToDo.push(itemValue)\n        remove('todos')\n        set('todos', JSON.stringify(tableauToDo))\n\n        // je fais le tableau en 2 dimensions afin de stocker l'état\n        tableauNew.push([itemValue, 'active'])\n        remove('todos2d')\n        set('todos2d', JSON.stringify(tableauNew))\n    }\n\n    //Pour retirer tous les items stockés dans la liste : \n    const removeAllItems = () => {\n        remove('todos')\n        tableauToDo = []\n    }\n\n    //tableauNew = [\n    //     [ 'a',\n    //     'done'], ['b', 'active']\n    // ]\n\n    // console.log(JSON.stringify(tableauNew));\n\n    // console.log(JSON.parse(JSON.stringify(tableauNew)))\n\n    \n\n    return {\n        addItem, tableauToDo, removeAllItems, initializeItems\n    }\n\n}"]},"metadata":{},"sourceType":"module"}