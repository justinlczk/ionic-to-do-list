{"ast":null,"code":"//import { IonInput } from '@ionic/react';\nimport { useStorage, useStorageItem } from '@capacitor-community/react-hooks/storage'; //const { Storage } = Plugins;\n\nconst TODO_STORAGE = \"todos\";\nconst tableauToDo = [];\nexport function useToDoList() {\n  const {\n    get,\n    set,\n    remove,\n    getKeys,\n    clear\n  } = useStorage();\n  const [name, setName] = useStorageItem('name', 'Maximum'); // Example:\n  //const updateName = useCallback((n) => {\n  //    setName(n);\n  //}, [setName]);\n  //Exemple de set\n  //set('name', 'Justin')\n  //console.log(get('name'))\n\n  const createItem = itemValue => {\n    //console.log('Le texte envoyé :', itemValue)\n    tableauToDo.push(itemValue); //console.log(tableauToDo)\n    //Ne prends que la dernière entrée en compte\n    //tableauToDo.map((value, index) => set('todos', JSON.stringify({ id: index, name: value})))\n    //console.log(get('todos'))\n    //Prends en compte plusieurs entrées mais écrase toujours les données précédentes\n    //set('todosSet', JSON.stringify(tableauToDo));\n    //console.log(get('todosSet'))\n\n    const returnList = get('todos').then(valueToDo => {\n      //console.log('ici cest la bonne', valueToDo);\n      if (valueToDo != null) {\n        const valueToreturn = JSON.parse(valueToDo);\n        set('todos', JSON.stringify(valueToreturn.concat(tableauToDo)));\n        console.log('Ici mtn', get('todos'));\n      } else {\n        set('todos', JSON.stringify(tableauToDo));\n      }\n    }); //set('todoKepp', JSON.stringify(tableauToDo))\n  };\n\n  return {\n    createItem,\n    tableauToDo\n  };\n}","map":{"version":3,"sources":["/Users/justinluczak/Documents/COURS CNAM 2EME ANNEE/webmobile/Exercice todolist/todolist/src/hooks/useToDoList.ts"],"names":["useStorage","useStorageItem","TODO_STORAGE","tableauToDo","useToDoList","get","set","remove","getKeys","clear","name","setName","createItem","itemValue","push","returnList","then","valueToDo","valueToreturn","JSON","parse","stringify","concat","console","log"],"mappings":"AAGA;AACA,SAASA,UAAT,EAAqBC,cAArB,QAA8D,0CAA9D,C,CAEA;;AAIA,MAAMC,YAAY,GAAG,OAArB;AACA,MAAMC,WAAqB,GAAG,EAA9B;AAGA,OAAO,SAASC,WAAT,GAAuB;AAE1B,QAAM;AAAEC,IAAAA,GAAF;AAAOC,IAAAA,GAAP;AAAYC,IAAAA,MAAZ;AAAoBC,IAAAA,OAApB;AAA6BC,IAAAA;AAA7B,MAAuCT,UAAU,EAAvD;AAGA,QAAM,CAACU,IAAD,EAAOC,OAAP,IAAkBV,cAAc,CAAC,MAAD,EAAS,SAAT,CAAtC,CAL0B,CAO1B;AACA;AACA;AACA;AAGA;AACA;AACA;;AAEA,QAAMW,UAAU,GAAIC,SAAD,IAAuB;AACtC;AACAV,IAAAA,WAAW,CAACW,IAAZ,CAAiBD,SAAjB,EAFsC,CAGtC;AAEA;AACA;AACA;AAIA;AACA;AAEA;;AAMA,UAAME,UAAU,GAAGV,GAAG,CAAC,OAAD,CAAH,CAAaW,IAAb,CAAmBC,SAAD,IAAe;AAChD;AAEA,UAAIA,SAAS,IAAI,IAAjB,EAAuB;AACnB,cAAMC,aAAa,GAAGC,IAAI,CAACC,KAAL,CAAWH,SAAX,CAAtB;AACAX,QAAAA,GAAG,CAAC,OAAD,EAAUa,IAAI,CAACE,SAAL,CAAeH,aAAa,CAACI,MAAd,CAAqBnB,WAArB,CAAf,CAAV,CAAH;AACAoB,QAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBnB,GAAG,CAAC,OAAD,CAA1B;AACH,OAJD,MAIO;AACHC,QAAAA,GAAG,CAAC,OAAD,EAAUa,IAAI,CAACE,SAAL,CAAelB,WAAf,CAAV,CAAH;AACH;AAEJ,KAXkB,CAAnB,CApBsC,CAqCtC;AAGH,GAxCD;;AA+CA,SAAO;AACHS,IAAAA,UADG;AACST,IAAAA;AADT,GAAP;AAIH","sourcesContent":["import { useState, useEffect, useCallback } from \"react\";\nimport { isPlatform } from '@ionic/react';\nimport { Plugins } from '@capacitor/core';\n//import { IonInput } from '@ionic/react';\nimport { useStorage, useStorageItem, availableFeatures } from '@capacitor-community/react-hooks/storage';\n\n//const { Storage } = Plugins;\n\n\n\nconst TODO_STORAGE = \"todos\";\nconst tableauToDo: string[] = [];\n\n\nexport function useToDoList() {\n\n    const { get, set, remove, getKeys, clear } = useStorage();\n    \n\n    const [name, setName] = useStorageItem('name', 'Maximum');\n\n    // Example:\n    //const updateName = useCallback((n) => {\n    //    setName(n);\n    //}, [setName]);\n\n\n    //Exemple de set\n    //set('name', 'Justin')\n    //console.log(get('name'))\n\n    const createItem = (itemValue: string) => {\n        //console.log('Le texte envoyé :', itemValue)\n        tableauToDo.push(itemValue)\n        //console.log(tableauToDo)\n\n        //Ne prends que la dernière entrée en compte\n        //tableauToDo.map((value, index) => set('todos', JSON.stringify({ id: index, name: value})))\n        //console.log(get('todos'))\n\n\n\n        //Prends en compte plusieurs entrées mais écrase toujours les données précédentes\n        //set('todosSet', JSON.stringify(tableauToDo));\n\n        //console.log(get('todosSet'))\n\n\n\n\n\n        const returnList = get('todos').then((valueToDo) => {\n            //console.log('ici cest la bonne', valueToDo);\n\n            if (valueToDo != null) {\n                const valueToreturn = JSON.parse(valueToDo)\n                set('todos', JSON.stringify(valueToreturn.concat(tableauToDo)))\n                console.log('Ici mtn', get('todos'))\n            } else {\n                set('todos', JSON.stringify(tableauToDo))\n            }\n\n        })\n\n\n\n        \n\n        //set('todoKepp', JSON.stringify(tableauToDo))\n        \n\n    }\n\n\n\n\n\n\n    return {\n        createItem, tableauToDo\n    }\n\n}\n\n\nexport interface ToDoList {\n    filepath: string;\n    webviewPath?: string;\n}"]},"metadata":{},"sourceType":"module"}